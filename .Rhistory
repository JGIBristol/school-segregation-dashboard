if (parts[4] == "asian" && parts[5] == "black") {
category <- "ab"
} else if (parts[4] == "asian" && parts[5] == "white") {
category <- "aw"
} else if (parts[4] == "black" && parts[5] == "white") {
category <- "bw"
}
}
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
school_type <- ifelse(parts[length(parts)] == "primary", "p", "s")
new_name <- paste(first_letter, category, school_type, sep="_")
return(new_name)
}
# Apply the renaming function to all column names
new_names <- sapply(names(merged_df), rename_column)
# Apply the renaming function to all column names
new_names <- sapply(names(merged_df), rename_column)
col_name == "year"
col_name
rename_column
sapply(names(merged_df),function(x) {
rename_column(x)
})
names(merged_df)
# Apply the renaming function to all column names
new_names <- sapply(names(merged_df),function(x) {
rename_column(x)
})
# Apply the renaming function to all column names
new_names <- sapply(names(merged_df),function(x) {
rename_column(x)
})
category
first_letter
names(merged_df)
parts
col_name == "year"
col_name <-   names(merged_df)[2]
col_name == "District_Name"
col_name <-   names(merged_df)[3]
col_name
col_name == "year"
col_name == "District_Name"
strsplit(col_name, "_")[[1]]
parts <- strsplit(col_name, "_")[[1]]
parts[1] == "dissimilarity"
if (parts[1] == "dissimilarity") {
first_letter <- "d"
} else if (parts[1] == "theil") {
first_letter <- "t"
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
first_letter
parts[2] == "fsm"
if (parts[2] == "fsm") {
category <- "fsm"
} else if (parts[2] == "race") {
if (parts[3] == "asian" && parts[4] == "black") {
category <- "ab"
} else if (parts[3] == "asian" && parts[4] == "white") {
category <- "aw"
} else if (parts[3] == "black" && parts[4] == "white") {
category <- "bw"
}
} else if (parts[2] == "entropy") {
if (length(parts) == 4) {  # No races specified
category <- "race"
} else {
if (parts[4] == "asian" && parts[5] == "black") {
category <- "ab"
} else if (parts[4] == "asian" && parts[5] == "white") {
category <- "aw"
} else if (parts[4] == "black" && parts[5] == "white") {
category <- "bw"
}
}
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
category
col_name
category
category
category
school_type <- ifelse(parts[length(parts)] == "primary", "p", "s")
school_type
new_name <- paste(first_letter, category, school_type, sep="_")
new_name
col_name
rename_column <- function(col_name) {
if (col_name == "year") {
return(col_name)  # Keep this column as is
}
if (col_name == "District_Name") {
return("district")
}
parts <- strsplit(col_name, "_")[[1]]
if (parts[1] == "dissimilarity") {
first_letter <- "d"
} else if (parts[1] == "theil") {
first_letter <- "t"
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
if (parts[2] == "fsm") {
category <- "fsm"
} else if (parts[2] == "race") {
if (parts[3] == "asian" && parts[4] == "black") {
category <- "ab"
} else if (parts[3] == "asian" && parts[4] == "white") {
category <- "aw"
} else if (parts[3] == "black" && parts[4] == "white") {
category <- "bw"
}
} else if (parts[2] == "entropy") {
if (length(parts) == 4) {  # No races specified
category <- "race"
} else {
if (parts[4] == "asian" && parts[5] == "black") {
category <- "ab"
} else if (parts[4] == "asian" && parts[5] == "white") {
category <- "aw"
} else if (parts[4] == "black" && parts[5] == "white") {
category <- "bw"
}
}
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
school_type <- ifelse(parts[length(parts)] == "primary", "p", "s")
new_name <- paste(first_letter, category, school_type, sep="_")
return(new_name)
}
new_names <- c()
for (i in names(merged_df)){
rename_column(x)
}
new_names <- c()
for (name in names(merged_df)){
rename_column(name)
}
name
col_name <- name
if (col_name == "year") {
return(col_name)  # Keep this column as is
}
if (col_name == "District_Name") {
return("district")
}
parts <- strsplit(col_name, "_")[[1]]
if (parts[1] == "dissimilarity") {
first_letter <- "d"
} else if (parts[1] == "theil") {
first_letter <- "t"
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
if (parts[2] == "fsm") {
category <- "fsm"
} else if (parts[2] == "race") {
if (parts[3] == "asian" && parts[4] == "black") {
category <- "ab"
} else if (parts[3] == "asian" && parts[4] == "white") {
category <- "aw"
} else if (parts[3] == "black" && parts[4] == "white") {
category <- "bw"
}
} else if (parts[2] == "entropy") {
if (length(parts) == 4) {  # No races specified
category <- "race"
} else {
if (parts[4] == "asian" && parts[5] == "black") {
category <- "ab"
} else if (parts[4] == "asian" && parts[5] == "white") {
category <- "aw"
} else if (parts[4] == "black" && parts[5] == "white") {
category <- "bw"
}
}
} else {
return(col_name)  # If it doesn't match expected pattern, keep original name
}
parts
names(merged_df)
source("~/projects/SegDash/11d_segregation_UK/segDataPrep/06_generate_segregration_indices.R", echo=TRUE)
source("~/projects/SegDash/11d_segregation_UK/segDataPrep/06_generate_segregration_indices.R", echo=TRUE)
name
single_index_folder
source("~/projects/SegDash/11d_segregation_UK/segDataPrep/06_generate_segregration_indices.R", echo=TRUE)
library(sf)
library(dplyr)
library(tidyr)
prepare_spatial_data <- function(shape_file_directory){
spatial_df <- sf::read_sf(shape_file_directory)
# Simplify the shapefile to reduce memory
# spatial_df <- rmapshaper::ms_simplify(spatial_df, keep = 0.001,keep_shapes = FALSE)
# Transform into lat-long projection
spatial_df <- sf::st_transform(spatial_df, 4326)
return(spatial_df)
}
library(sf)
library(dplyr)
library(tidyr)
prepare_spatial_data <- function(shape_file_directory){
spatial_df <- sf::read_sf(shape_file_directory)
# Simplify the shapefile to reduce memory
# spatial_df <- rmapshaper::ms_simplify(spatial_df, keep = 0.001,keep_shapes = FALSE)
# Transform into lat-long projection
spatial_df <- sf::st_transform(spatial_df, 4326)
return(spatial_df)
}
get_plot_information <- function(figure_directory){
years_folders <- list.files(figure_directory)
plot_types <- lapply(years_folders, function(year_folder){
list.files(paste0(figure_directory, year_folder,collapse = '/'))
}) |> unlist() |> unique()
all_plots <- list()
i <- 1
for (year_folder in years_folders){
for (plot_type in plot_types){
dir_to_check <- paste0(figure_directory, '/',year_folder,'/' ,plot_type,'/')
dir_to_check <- gsub('//', '/', dir_to_check)
dir_plots <- list.files(dir_to_check)
file_suffix <- paste0('_', plot_type, '_', year_folder,'.png')
for (plot in dir_plots){
area <- gsub(file_suffix, '', plot)
if(area==''){
next
}
plot_path <- paste0(
dir_to_check,
plot
)
all_plots[[i]] <- list(
year_store = year_folder,
plot_type_store = plot_type,
areas_store = area,
plot_path = plot_path
)
i <- i + 1
}
}
}
all_plots <- dplyr::bind_rows(all_plots)
all_plots$year <- substr(all_plots$year_store, 1, 4)
to_title <- function(x) {
x <- gsub("(^|_)([[:alpha:]])", "\\1\\U\\2", x, perl = TRUE)
x <- gsub("(^|-)([[:alpha:]])", "\\1\\U\\2", x, perl = TRUE)
x <- gsub("_", " ", x)
x <- gsub(" Of ", " of ", x)
x <- gsub(" On ", " on ", x)
x <- gsub(" And ", " and ", x)
x <- gsub(" With ", " with ", x)
x <- gsub(" In ", " in ", x)
x <- gsub("-In-", "-in-", x)
x <- gsub(" County Of", " County of", x)
x <- gsub(" City Of", " City of", x)
return(x)
}
all_plots$area <- to_title(all_plots$areas_store)
all_plots$plot_path <- gsub('./', '/', all_plots$plot_path,fixed=T)
return(all_plots)
}
shape_file_directory <- './Local_Authority_Districts_May_2024_Boundaries_UK_BUC_-7430853278415417895//'
figure_directory <- './2_figures/'
output_directory <- 'outputs/'
spatial_data <- prepare_spatial_data(shape_file_directory)
spatial_data
spatial_data <-  spatial_data[substr(spatial_data$LAD24CD, 1, 1) == 'E',]
plot_information <- get_plot_information(figure_directory)
plot_information
spatial_data$link <- tolower(spatial_data$LAD24NM)
spatial_data$link <- gsub(' ','_', spatial_data$link)
spatial_data$link <- gsub('-','_', spatial_data$link)
spatial_data$link <- gsub(',','_', spatial_data$link)
plot_information$areas_store
plot_information$link <- tolower(plot_information$areas_store)
plot_information$link <- gsub(' ','_', plot_information$link)
plot_information$link <- gsub('-','_', plot_information$link)
plot_information$link <- gsub(',','_', plot_information$link)
missing_areas <- length(unique(plot_information$link[plot_information$link %in% spatial_data$link==F]))
missing_areas
if(length(missing_areas)>0){
warning(paste0('Missing areas: ', missing_areas))
}
area_list <- list()
for (i in 1:nrow(plot_information)){
area_list[[i]] <- list(
'name'=plot_information$area[i],
'link'=plot_information$link[i])
}
area_list <- unique(area_list)
area_list
filters <- list(
'year' = sort(unique(plot_information$year)),
'plot_type' = sort(unique(plot_information$plot_type_store)),
'area' = area_list)
dir.create(output_directory, showWarnings = F)
output_directory
plot_information <- jsonlite::toJSON(plot_information, pretty = T,auto_unbox = T)
readr::write_file(plot_information, paste0(output_directory, 'plot_information.json'))
filters <- jsonlite::toJSON(filters, pretty = T,auto_unbox = T)
filters <- jsonlite::toJSON(filters, pretty = T,auto_unbox = T)
readr::write_file(filters, paste0(output_directory, 'filters.json'))
spatial_data
sf::st_write(spatial_data, paste0(output_directory, 'spatial_data.geojson'))
filters
# Switch back to the repository home directory
setwd('../')
files_to_move <- list.files('./segDataPrep/outputs/', full.names = T)
files_to_move
files_to_move <- list.files('./segDataPrep/outputs', full.names = T)
files_to_move
files_to_move <- list.files('./segDataPrep/outputs')
files_to_move
files_to_move <- list.files('./segDataPrep/outputs')
for (file in files_to_move){
file_name <- basename(file)
file_path <- paste0('segDataPrep/outputs/', file_name)
new_file_path <- paste0('app/src/data/', file_name)
file.copy(file_path, new_file_path)
}
files_to_move <- list.files('./segDataPrep/outputs')
for (file in files_to_move){
file_name <- basename(file)
file_path <- paste0('segDataPrep/outputs/', file_name)
new_file_path <- paste0('app/src/data/', file_name)
new_file_path <- gsub('geojson', 'json', new_file_path)
file.copy(file_path, new_file_path)
}
setwd("./segDataPrep/")
shape_file_directory <- './Local_Authority_Districts_May_2024_Boundaries_UK_BUC_-7430853278415417895//'
figure_directory <- './2_figures/'
output_directory <- 'outputs/'
prepare_shapefile(shape_file_directory,
figure_directory,
output_directory)
library(sf)
library(dplyr)
library(tidyr)
prepare_spatial_data <- function(shape_file_directory){
spatial_df <- sf::read_sf(shape_file_directory)
# Simplify the shapefile to reduce memory
# spatial_df <- rmapshaper::ms_simplify(spatial_df, keep = 0.001,keep_shapes = FALSE)
# Transform into lat-long projection
spatial_df <- sf::st_transform(spatial_df, 4326)
return(spatial_df)
}
get_plot_information <- function(figure_directory){
years_folders <- list.files(figure_directory)
plot_types <- lapply(years_folders, function(year_folder){
list.files(paste0(figure_directory, year_folder,collapse = '/'))
}) |> unlist() |> unique()
all_plots <- list()
i <- 1
for (year_folder in years_folders){
for (plot_type in plot_types){
dir_to_check <- paste0(figure_directory, '/',year_folder,'/' ,plot_type,'/')
dir_to_check <- gsub('//', '/', dir_to_check)
dir_plots <- list.files(dir_to_check)
file_suffix <- paste0('_', plot_type, '_', year_folder,'.png')
for (plot in dir_plots){
area <- gsub(file_suffix, '', plot)
if(area==''){
next
}
plot_path <- paste0(
dir_to_check,
plot
)
all_plots[[i]] <- list(
year_store = year_folder,
plot_type_store = plot_type,
areas_store = area,
plot_path = plot_path
)
i <- i + 1
}
}
}
all_plots <- dplyr::bind_rows(all_plots)
all_plots$year <- substr(all_plots$year_store, 1, 4)
to_title <- function(x) {
x <- gsub("(^|_)([[:alpha:]])", "\\1\\U\\2", x, perl = TRUE)
x <- gsub("(^|-)([[:alpha:]])", "\\1\\U\\2", x, perl = TRUE)
x <- gsub("_", " ", x)
x <- gsub(" Of ", " of ", x)
x <- gsub(" On ", " on ", x)
x <- gsub(" And ", " and ", x)
x <- gsub(" With ", " with ", x)
x <- gsub(" In ", " in ", x)
x <- gsub("-In-", "-in-", x)
x <- gsub(" County Of", " County of", x)
x <- gsub(" City Of", " City of", x)
return(x)
}
all_plots$area <- to_title(all_plots$areas_store)
all_plots$plot_path <- gsub('./', '/', all_plots$plot_path,fixed=T)
return(all_plots)
}
prepare_shapefile <- function(shape_file_directory,
figure_directory,
output_directory){
spatial_data <- prepare_spatial_data(shape_file_directory)
spatial_data <-  spatial_data[substr(spatial_data$LAD24CD, 1, 1) == 'E',]
plot_information <- get_plot_information(figure_directory)
spatial_data$link <- tolower(spatial_data$LAD24NM)
spatial_data$link <- gsub(' ','_', spatial_data$link)
spatial_data$link <- gsub('-','_', spatial_data$link)
spatial_data$link <- gsub(',','_', spatial_data$link)
plot_information$link <- tolower(plot_information$areas_store)
plot_information$link <- gsub(' ','_', plot_information$link)
plot_information$link <- gsub('-','_', plot_information$link)
plot_information$link <- gsub(',','_', plot_information$link)
missing_areas <- length(unique(plot_information$link[plot_information$link %in% spatial_data$link==F]))
if(length(missing_areas)>0){
warning(paste0('Missing areas: ', missing_areas))
}
area_list <- list()
for (i in 1:nrow(plot_information)){
area_list[[i]] <- list(
'name'=plot_information$area[i],
'link'=plot_information$link[i])
}
area_list <- unique(area_list)
filters <- list(
'year' = sort(unique(plot_information$year)),
'plot_type' = sort(unique(plot_information$plot_type_store)),
'area' = area_list)
dir.create(output_directory, showWarnings = F)
plot_information <- jsonlite::toJSON(plot_information, pretty = T,auto_unbox = T)
readr::write_file(plot_information, paste0(output_directory, 'plot_information.json'))
# jsonlite::write_json(plot_information, pastIe0(output_directory, 'plot_information.json'))
filters <- jsonlite::toJSON(filters, pretty = T,auto_unbox = T)
readr::write_file(filters, paste0(output_directory, 'filters.json'))
sf::st_write(spatial_data, paste0(output_directory, 'spatial_data.geojson'))
}
prepare_shapefile(shape_file_directory,
figure_directory,
output_directory)
spatial_data <- prepare_spatial_data(shape_file_directory)
spatial_data <-  spatial_data[substr(spatial_data$LAD24CD, 1, 1) == 'E',]
plot_information <- get_plot_information(figure_directory)
spatial_data$link <- tolower(spatial_data$LAD24NM)
spatial_data$link <- gsub(' ','_', spatial_data$link)
spatial_data$link <- gsub('-','_', spatial_data$link)
spatial_data$link <- gsub(',','_', spatial_data$link)
plot_information$link <- tolower(plot_information$areas_store)
plot_information$link <- gsub(' ','_', plot_information$link)
plot_information$link <- gsub('-','_', plot_information$link)
plot_information$link <- gsub(',','_', plot_information$link)
missing_areas <- length(unique(plot_information$link[plot_information$link %in% spatial_data$link==F]))
if(length(missing_areas)>0){
warning(paste0('Missing areas: ', missing_areas))
}
area_list <- list()
for (i in 1:nrow(plot_information)){
area_list[[i]] <- list(
'name'=plot_information$area[i],
'link'=plot_information$link[i])
}
area_list <- unique(area_list)
filters <- list(
'year' = sort(unique(plot_information$year)),
'plot_type' = sort(unique(plot_information$plot_type_store)),
'area' = area_list)
dir.create(output_directory, showWarnings = F)
plot_information <- jsonlite::toJSON(plot_information, pretty = T,auto_unbox = T)
plot_information
readr::write_file(plot_information, paste0(output_directory, 'plot_information.json'))
filters <- jsonlite::toJSON(filters, pretty = T,auto_unbox = T)
readr::write_file(filters, paste0(output_directory, 'filters.json'))
sf::st_write(spatial_data, paste0(output_directory, 'spatial_data.geojson'), append = F)
# Switch back to the repository home directory
setwd('../')
files_to_move <- list.files('./segDataPrep/outputs')
for (file in files_to_move){
file_name <- basename(file)
file_path <- paste0('segDataPrep/outputs/', file_name)
new_file_path <- paste0('app/src/data/', file_name)
new_file_path <- gsub('geojson', 'json', new_file_path)
file.copy(file_path, new_file_path)
}
.
setwd("./segDataPrep/")
# Switch back to the repository home directory
setwd('../')
files_to_move <- list.files('./segDataPrep/outputs')
for (file in files_to_move){
file_name <- basename(file)
file_path <- paste0('segDataPrep/outputs/', file_name)
new_file_path <- paste0('app/src/data/', file_name)
new_file_path <- gsub('geojson', 'json', new_file_path)
file.copy(file_path, new_file_path)
}
files_to_move
files_to_move <- list.files('./segDataPrep/outputs')
for (file in files_to_move){
file_name <- basename(file)
file_path <- paste0('segDataPrep/outputs/', file_name)
new_file_path <- paste0('app/src/data/', file_name)
new_file_path <- gsub('geojson', 'json', new_file_path)
file.copy(file_path, new_file_path, overwrite = T)
}
setwd("./segDataPrep/")
seg_indices <- read_csv("./3_segregation_indices/full_file_cols_segregation.csv")
seg_indices
plot_information
spatial_data
